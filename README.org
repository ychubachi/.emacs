#+startup: content num noindent
* Header
** はじめに
   - init.elの実行時、このREADME.orgからREADME.elを生成します。
   - orgのハッケージは手動で最新版に更新しておきます。 

** Copyright
- Copyright など。

#+begin_src emacs-lisp
;;; README.el --- My README.el  -*- lexical-binding: t; -*-

;; Copyright (C) 2020 Yoshihide Chubachi

;; Author: Yoshihide Chubachi <yoshi@chubachi.net>

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;  My README.el.

;;; Code:
#+end_src

* 準備
** (require 'cl)を検査しない

#+begin_src emacs-lisp
(setq byte-compile-warnings '(not cl-functions obsolete))
#+end_src

** ここの意味が理解できてない

#+begin_src emacs-lisp
  ;; this enables this running method
  ;;   emacs -q -l ~/.debug.emacs.d/{{pkg}}/init.el
  (eval-and-compile
    (when (or load-file-name byte-compile-current-file)
      (setq user-emacs-directory
            (expand-file-name
             (file-name-directory
              (or load-file-name byte-compile-current-file))))))
#+end_src

** パッケージの設定

#+begin_src emacs-lisp
  (eval-and-compile
    (customize-set-variable
     'package-archives '(("org"   . "https://orgmode.org/elpa/")
                         ("melpa" . "https://melpa.org/packages/")
                         ("gnu"   . "https://elpa.gnu.org/packages/")))
    (package-initialize)
#+end_src

** leafの導入

#+begin_src emacs-lisp
    (unless (package-installed-p 'leaf)
      (package-refresh-contents)
      (package-install 'leaf))

    (leaf leaf-keywords
      :ensure t
      :init
      ;; optional packages if you want to use :hydra, :el-get, :blackout,,,
      (leaf hydra :ensure t)
      (leaf el-get :ensure t)
      (leaf blackout :ensure t)

      :config
      ;; initialize leaf-keywords.el
      (leaf-keywords-init)))

  (leaf leaf
    :config
    (leaf leaf-convert :ensure t)
    (leaf leaf-tree
      :ensure t
      :custom ((imenu-list-size . 30)
               (imenu-list-position . 'left))))

#+end_src

** cutom-fileを別ファイルにする
- 自動で生成される設定は別ファイルとする。
- このファイルはあえてよみこまない。

#+begin_src emacs-lisp
  ;; We do not use costom.el.
  (leaf cus-edit
    :doc "tools for customizing Emacs and Lisp packages"
    :tag "builtin" "faces" "help"
    :custom `((custom-file . ,(locate-user-emacs-file "custom.el"))))
#+end_src

* ビルトインパッケージの設定
** leafを使ってビルトインパッケージのカスタマイズ
#+begin_src emacs-lisp
  ;; You can also configure builtin package via leaf!
  (leaf cus-start
    :doc "define customization properties of builtins"
    :tag "builtin" "internal"
    :bind (("\C-z" . undo))
    :custom ((user-full-name . "Yoshihide Chubachi")
             (user-mail-address . "yoshi@chubachi.net")
             (user-login-name . "yc")
             ;; (truncate-lines . t)
             ;; (menu-bar-mode . t)
             ;; (tool-bar-mode . nil)
             ;; (scroll-bar-mode . nil)
             ;; (indent-tabs-mode . nil)
             (blink-cursor-mode . nil)
             (global-auto-revert-mode . t))
    :config
    (defalias 'yes-or-no-p 'y-or-n-p)
    (keyboard-translate ?\C-h ?\C-?) ;; ???
    )
#+end_src
** paren

- 対応するカッコの表示

#+begin_src emacs-lisp
  (leaf paren
    :doc "highlight matching paren"
    :tag "builtin"
    :custom ((show-paren-delay . 0.1))
    :global-minor-mode show-paren-mode)
#+end_src

** isearch

- isearch で漢字入力ができるようにする

#+begin_src emacs-lisp
  (leaf isearch
    :bind ((isearch-mode-map
            ("C-o" . isearch-toggle-input-method))))
#+end_src

** wdired

- 多分設定が中途はんぱ

#+begin_src emacs-lisp
  (leaf wdired
    :doc "Rename files editing their names in dired buffers"
    :tag "builtin"
    :added "2020-11-21"
    :bind ((wdired-mode-map
            ("C-o" . toggle-input-method))))
#+end_src

** autorevert
- ディスクのファイルが更新されたらバッファも自動で更新する

#+begin_src emacs-lisp

  (leaf autorevert
    :doc "revert buffers when files on disk change"
    :tag "builtin"
    :custom ((auto-revert-interval . 0.1))
    :global-minor-mode global-auto-revert-mode)
#+end_src

** macrostep

- elispのマクロを展開する

#+begin_src emacs-lisp
  (leaf macrostep
    :doc "interactive macro expander"
    :req "cl-lib-0.5"
    :tag "debugging" "macro" "languages" "lisp"
    :url "https://github.com/joddie/macrostep"
    :ensure t
    :bind (("C-c e" . macrostep-expand)))
#+end_src

* helm
** straightパッケージマネージャー

   #+begin_src emacs-lisp
     (defvar bootstrap-version)
     (let ((bootstrap-file
            (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
           (bootstrap-version 5))
       (unless (file-exists-p bootstrap-file)
         (with-current-buffer
             (url-retrieve-synchronously
              "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
              'silent 'inhibit-cookies)
           (goto-char (point-max))
           (eval-print-last-sexp)))
       (load bootstrap-file nil 'nomessage))

     (setq package-enable-at-startup nil)
   #+end_src

** Helm
   - [[https://github.com/emacs-helm/helm/wiki#from-straight-package-manager][Home · emacs-helm/helm Wiki]]
     
   #+begin_src emacs-lisp
     (straight-use-package 'helm)
     (global-set-key (kbd "M-x") #'helm-M-x)
     (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
     (global-set-key (kbd "C-x C-f") #'helm-find-files)
     (helm-mode 1)
   #+end_src
  
* org-mode
** 基本設定

- org-agenda-filesのリストにDropboxのディレクトリを追加しておく。
  - この中にあるorgファイルがすべてagendaに反映される。
- org-num-modeをすべてのファイルで実行する
  - (org-startup-numerated . t)がうまく反映されない。
- Androd端末から利用するには [[https://play.google.com/store/apps/details?id=com.orgzly][Orgzly]] が良さそう。

   #+begin_src emacs-lisp
     (leaf org-mode
       :custom (org-agenda-files . '("~/Dropbox/org/"))
       :bind (("C-c l" . org-store-link)
              ("C-c a" . org-agenda)
              ("C-c c" . org-capture)))
   #+end_src
   
** org-tempo

- "<el"+<TAB>　でemacs-lispのソースコードブロックがでるように設定。

#+begin_src emacs-lisp
  (leaf org-tempo
    :config
    (add-to-list 'org-structure-template-alist
                 '("el" . "src emacs-lisp")))
#+end_src

** latex/beamer

- pygmentをインストールしておく
- beamerの作成は C-c C-e l P

#+begin_src emacs-lisp
  (require 'ox-latex)
  (require 'ox-beamer)

  (setq org-latex-pdf-process
        '("platex -shell-escape %f"
          "platex -shell-escape %f"
          "pbibtex %b"
          "platex -shell-escape %f"
          "platex -shell-escape %f"
          "dvipdfmx %b.dvi"))

  (setq org-export-latex-listings t)
  (setq org-latex-listings 'minted)
  (setq org-beamer-outline-frame-title "目次")

  (setq org-latex-minted-options
        '(("frame" "lines")
          ("framesep=2mm")
          ("linenos=true")
          ("baselinestretch=1.2")
          ("fontsize=\\footnotesize")
          ("breaklines")
          ))
#+end_src

- beamerのフレームの位置をtopにする。

#+begin_src emacs-lisp
  (setq org-beamer-frame-default-options "t")
#+end_src

* 外部パッケージ
** fly-check

- emacs-lispのドキュメント用のチェック(emacs-lisp-checkdoc)を無効にする。

#+begin_src emacs-lisp
  (leaf flycheck
    :doc "On-the-fly syntax checking"
    :emacs>= 24.3
    :ensure t
    :bind (("M-n" . flycheck-next-error)
           ("M-p" . flycheck-previous-error))
    :custom ((flycheck-emacs-lisp-initialize-packages . t)
             (flycheck-disabled-checkers . '(emacs-lisp-checkdoc)))
    :hook (emacs-lisp-mode-hook lisp-interaction-mode-hook)
    :config
    (leaf flycheck-package
      :doc "A Flycheck checker for elisp package authors"
      :ensure t
      :config
      (flycheck-package-setup))

    (leaf flycheck-elsa
      :doc "Flycheck for Elsa."
      :emacs>= 25
      :ensure t
      :config
      (flycheck-elsa-setup))
    )
#+end_src

** pandoc-mode

- C-c / でメニュー表示
- http://joostkremers.github.io/pandoc-mode/

#+begin_src emacs-lisp
  (leaf pandoc-mode
    :doc "Minor mode for interacting with Pandoc"
    :req "hydra-0.10.0" "dash-2.10.0"
    :tag "pandoc" "text"
    :added "2020-11-24"
    :url "http://joostkremers.github.io/pandoc-mode/"
    :ensure t
    :after hydra)
#+end_src

** magict
- EmacsのGit
#+begin_src emacs-lisp
  (leaf magit
    :doc "A Git porcelain inside Emacs."
    :req "emacs-25.1" "async-20200113" "dash-20200524" "git-commit-20200516" "transient-20200601" "with-editor-20200522"
    :tag "vc" "tools" "git" "emacs>=25.1"
    :added "2020-11-30"
    :emacs>= 25.1
    :ensure t
    :after git-commit with-editor
    :bind (("C-x g" . magit-status)))
#+end_src

** doomthemes
   - custom-faceが機能していないかも

   #+begin_src emacs-lisp
     (leaf doom-themes
       :ensure t
       :custom ((doom-themes-enable-italic . t)
                (doom-themes-enable-bold . t))
       :custom-face
         (doom-modeline-bar . '((t (:background "#6272a4"))))
       :config
       (load-theme 'doom-dracula t)
         (doom-themes-neotree-config)
         (doom-themes-org-config))
   #+end_src

* OS依存の設定
** Linuxでmozcの設定
   - elispのマクロを展開する

#+begin_src emacs-lisp
  (leaf mozc-im
    :if (eq system-type 'gnu/linux)
    :doc "Mozc with input-method-function interface."
    :req "mozc-0"
    :tag "extentions" "i18n"
    :ensure t
    :require mozc-im
    :custom
    ((default-input-method . "japanese-mozc-im"))
    :bind (("C-o" . toggle-input-method))
    )
#+end_src

** Windows IME設定
   - OSの判定方法
     [[https://hangstuck.com/emacs-system-type/][Emacsの設定ファイルをOSの判定をして共有する方法｜system-type | ハングスタック]]

    #+begin_src emacs-lisp
      (when (eq system-type 'windows-nt)
        (package-install 'tr-ime)
        (tr-ime-standard-install)
        (setq default-input-method "W32-IME")
        (w32-ime-initialize))
    #+end_src

* Footer

- お約束の記述

#+begin_src emacs-lisp
(provide 'README)

;; Local Variables:
;; indent-tabs-mode: nil
;; byte-compile-warnings: (not cl-functions obsolete)
;; End:

;;; README.el ends here
#+end_src
