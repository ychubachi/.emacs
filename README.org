* Emacs init.el
** head

- Copyright など。

#+begin_src emacs-lisp
;;; README.el --- My README.el  -*- lexical-binding: t; -*-

;; Copyright (C) 2020 Yoshihide Chubachi

;; Author: Yoshihide Chubachi <yoshi@chubachi.net>

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;  My README.el.

;;; Code:
#+end_src

** body

#+begin_src emacs-lisp
  ;; this enables this running method
  ;;   emacs -q -l ~/.debug.emacs.d/{{pkg}}/init.el
  (eval-and-compile
    (when (or load-file-name byte-compile-current-file)
      (setq user-emacs-directory
            (expand-file-name
             (file-name-directory
              (or load-file-name byte-compile-current-file))))))

  (eval-and-compile
    (customize-set-variable
     'package-archives '(("org"   . "https://orgmode.org/elpa/")
                         ("melpa" . "https://melpa.org/packages/")
                         ("gnu"   . "https://elpa.gnu.org/packages/")))
    (package-initialize)
    (unless (package-installed-p 'leaf)
      (package-refresh-contents)
      (package-install 'leaf))

    (leaf leaf-keywords
      :ensure t
      :init
      ;; optional packages if you want to use :hydra, :el-get, :blackout,,,
      (leaf hydra :ensure t)
      (leaf el-get :ensure t)
      (leaf blackout :ensure t)

      :config
      ;; initialize leaf-keywords.el
      (leaf-keywords-init)))

  (leaf leaf
    :config
    (leaf leaf-convert :ensure t)
    (leaf leaf-tree
      :ensure t
      :custom ((imenu-list-size . 30)
               (imenu-list-position . 'left))))

  ;; We do not use costom.el.
  (leaf cus-edit
    :doc "tools for customizing Emacs and Lisp packages"
    :tag "builtin" "faces" "help"
    :custom `((custom-file . ,(locate-user-emacs-file "custom.el"))))

  ;; You can also configure builtin package via leaf!
  (leaf cus-start
    :doc "define customization properties of builtins"
    :tag "builtin" "internal"
    :bind (("\C-z" . undo))
    :custom ((user-full-name . "Yoshihide Chubachi")
             (user-mail-address . "yoshi@chubachi.net")
             (user-login-name . "yc")
             ;; (truncate-lines . t)
             ;; (menu-bar-mode . t)
             ;; (tool-bar-mode . nil)
             ;; (scroll-bar-mode . nil)
             ;; (indent-tabs-mode . nil)
             (blink-cursor-mode . nil))
    :config
    (defalias 'yes-or-no-p 'y-or-n-p)
    (keyboard-translate ?\C-h ?\C-?) ;; ???
    )

  ;; ;; builtin packages
  (leaf paren
    :doc "highlight matching paren"
    :tag "builtin"
    :custom ((show-paren-delay . 0.1))
    :global-minor-mode show-paren-mode)

  (leaf isearch
    :bind ((isearch-mode-map
            ("C-o" . isearch-toggle-input-method))))

  ;; 多分設定が中途はんぱ
  (leaf wdired
    :doc "Rename files editing their names in dired buffers"
    :tag "builtin"
    :added "2020-11-21"
    :bind ((wdired-mode-map
            ("C-o" . toggle-input-method))))

  (leaf autorevert
    :doc "revert buffers when files on disk change"
    :tag "builtin"
    :custom ((auto-revert-interval . 0.1))
    :global-minor-mode global-auto-revert-mode)

  (leaf macrostep
    :doc "interactive macro expander"
    :req "cl-lib-0.5"
    :tag "debugging" "macro" "languages" "lisp"
    :added "2020-11-21"
    :url "https://github.com/joddie/macrostep"
    :bind (("C-c e" . macrostep-expand)))

  (leaf mozc-im
    :doc "Mozc with input-method-function interface."
    :req "mozc-0"
    :tag "extentions" "i18n"
    :added "2020-11-21"
    :ensure t
    :require mozc-im
    :custom
    ((default-input-method . "japanese-mozc-im"))
    :bind (("C-o" . toggle-input-method))
    )

#+end_src

** fly-check

- emacs-lispのドキュメント用のチェック(emacs-lisp-checkdoc)を無効にする。

#+begin_src emacs-lisp
  (leaf flycheck
    :doc "On-the-fly syntax checking"
    :emacs>= 24.3
    :ensure t
    :bind (("M-n" . flycheck-next-error)
           ("M-p" . flycheck-previous-error))
    :custom ((flycheck-emacs-lisp-initialize-packages . t)
             (flycheck-disabled-checkers . '(emacs-lisp-checkdoc)))
    :hook (emacs-lisp-mode-hook lisp-interaction-mode-hook)
    :config
    (leaf flycheck-package
      :doc "A Flycheck checker for elisp package authors"
      :ensure t
      :config
      (flycheck-package-setup))

    (leaf flycheck-elsa
      :doc "Flycheck for Elsa."
      :emacs>= 25
      :ensure t
      :config
      (flycheck-elsa-setup))
    )
#+end_src

** org-mode
*** org-tempo

- "<el"+<TAB>　でemacs-lispのソースコードブロックがでるように設定。

#+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist
               '("el" . "src emacs-lisp"))
#+end_src

*** beamer

- pygmentをインストールしておく
- beamerの作成は C-c C-e l P

#+begin_src emacs-lisp
  (require 'ox-latex)
  (require 'ox-beamer)

  (setq org-latex-pdf-process
        '("platex -shell-escape %f"
          "platex -shell-escape %f"
          "pbibtex %b"
          "platex -shell-escape %f"
          "platex -shell-escape %f"
          "dvipdfmx %b.dvi"))

  (setq org-export-latex-listings t)
  (setq org-latex-listings 'minted)
  (setq org-beamer-outline-frame-title "目次")

  (setq org-latex-minted-options
        '(("frame" "lines")
          ("framesep=2mm")
          ("linenos=true")
          ("baselinestretch=1.2")
          ("fontsize=\\footnotesize")
          ("breaklines")
          ))
#+end_src

- フレームの位置をtopにする。

#+begin_src emacs-lisp
  (setq org-beamer-frame-default-options "t")
#+end_src

** pandoc-mode

- C-c / でメニュー表示
- http://joostkremers.github.io/pandoc-mode/

#+begin_src emacs-lisp
  (leaf pandoc-mode
    :doc "Minor mode for interacting with Pandoc"
    :req "hydra-0.10.0" "dash-2.10.0"
    :tag "pandoc" "text"
    :added "2020-11-24"
    :url "http://joostkremers.github.io/pandoc-mode/"
    :ensure t
    :after hydra)
#+end_src

** Footer

- お約束

#+begin_src emacs-lisp
(provide 'README)

;; Local Variables:
;; indent-tabs-mode: nil
;; End:

;;; README.el ends here
#+end_src
